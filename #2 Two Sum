class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap();
        
        // fill HashMap
        for(int i=0; i<nums.length; i++){
            map.put(nums[i], i);
        }
        
        //Searching in HashMap
        for(int i=0; i<nums.length; i++){ // 2, 7, 11, 15 target=9
            int num = nums[i];  //2 (0)
            int rem =target - num; // 9-2=7 search 7 in HashMap
            if(map.containsKey(rem)){
                int index=map.get(rem);
                if(index==i)
                    continue;
                return new int[]{i, index};
            }
        }
        return new int[]{};
    }
}
// time compexity= O(n) and space complexity=(n)

// class Solution {
//     public int[] twoSum(int[] nums, int target) {
//         for(int i=0; i<nums.length; i++){
//             for(int j=i+1; j<nums.length; j++){
//                 if(nums[i] + nums[j] == target){       
//                     return new int[] {i, j};
//                 }                  
//             }
//         }
//         return new int[] {};
//     }
// }
